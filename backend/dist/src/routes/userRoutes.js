"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userController_1 = require("../controllers/userController");
const authMiddleware_1 = require("../middleware/authMiddleware");
const validationMiddleware_1 = require("../middleware/validationMiddleware");
const router = express_1.default.Router();
router.post('/login', (0, validationMiddleware_1.validate)(), userController_1.userController.login.bind(userController_1.userController));
router.post("/signup", (0, validationMiddleware_1.validate)(), userController_1.userController.register.bind(userController_1.userController));
router.post("/forgot-password", userController_1.userController.forgotPassword.bind(userController_1.userController));
router.post("/reset-password", userController_1.userController.resetPassword.bind(userController_1.userController));
router.post("/send-otp", userController_1.userController.sendOTP.bind(userController_1.userController));
router.post("/verify-otp", userController_1.userController.verifyOTP.bind(userController_1.userController));
router.post("/resend-otp", userController_1.userController.resendOTP.bind(userController_1.userController));
router.get("/", (0, authMiddleware_1.verifyToken)(["admin"]), userController_1.userController.getAllUsers.bind(userController_1.userController));
router.put("/block/:userId", (0, authMiddleware_1.verifyToken)(["admin"]), userController_1.userController.toggleBlockUser.bind(userController_1.userController));
router.get("/profile", (0, authMiddleware_1.verifyToken)(["admin", "user"]), userController_1.userController.getUserProfile.bind(userController_1.userController));
router.put("/profile", (0, validationMiddleware_1.validate)(), (0, authMiddleware_1.verifyToken)(["admin", "user"]), userController_1.userController.updateUserProfile.bind(userController_1.userController));
router.post("/change-password", (0, authMiddleware_1.verifyToken)(["user"]), userController_1.userController.changePassword.bind(userController_1.userController));
exports.default = router;
